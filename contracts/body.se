extern square: [drop_gas:i, enter, get_admin, get_creature, get_down, get_gas, get_left, get_right, get_up, harvest, leave, rewrite_state:iiiiiii, spawn:i, get_neighbor:i]
extern body: [rewrite_state, move_left, move_right, move_up, move_down, get_location, get_gas, get_hp, get_brain, get_species, get_gamemaster, harvest, damage, attack_left, attack_right, attack_up, attack_down, _move]
extern creature_builder: [build_creature:iiiii]
extern brain: [notify_of_turn]
extern gamemaster: [notify_of_spawn:i]

inset('basic_macros.se')

macro requires_turn():
    if msg.sender != self.brain:
        return(-1)

    if self.my_turn != 1:
        return(-1)

    self.my_turn = 0

data location
data gas
data hp
data brain
data species
data gamemaster
data creature_builder
data my_turn
data dead

def init():
    self.gamemaster = msg.sender

def set_gamemaster(_gamemaster):
    authenticate(self.gamemaster)

    self.gamemaster = _gamemaster

def set_location(_location):
    authenticate(self.gamemaster)

    self.location = _location

def set_gas(_gas):
    authenticate(self.gamemaster)

    self.gas = _gas

def set_hp(_hp):
    authenticate(self.gamemaster)

    self.hp = _hp

def set_brain(_brain):
    authenticate(self.gamemaster)

    self.brain = _brain

def set_species(_species):
    authenticate(self.gamemaster)

    self.species = _species

def set_creature_builder(_creature_builder):
    authenticate(self.gamemaster)

    self.creature_builder = _creature_builder

def get_location():
    return(self.location)

def get_gas():
    return(self.gas)

def get_hp():
    return(self.hp)

def get_brain():
    return(self.brain)

def get_species():
    return(self.species)

def get_gamemaster():
    return(self.gamemaster)

def get_dead():
    return(self.dead)

def damage():
    self.hp = self.hp - 1
    if self.hp == 0:
        self.dead = 1
        self.location.drop_gas(self.gas, as=square)
        self.location.leave(as=square)
        self.gas = 0

def deduct_gas(amount):
    authenticate(self.gamemaster)

    self.gas -= amount

def notify_of_turn():
    authenticate(self.gamemaster)

    if self.dead == 1:
        return(-1)

    self.my_turn = 1
    self.brain.notify_of_turn(as=brain)
    self.my_turn = 0

def move(direction):
    requires_turn()

    current_location = self.location
    destination = current_location.get_neighbor(direction, as=square)

    if destination.get_creature(as=square) == 0:
        self.location = destination
        current_location.leave(as=square)
        destination.enter(as=square)
        return(1)

def harvest():
    requires_turn()

    location = self.location
    gain = location.harvest(as=square)
    self.gas = self.gas + gain
    return(gain)

def attack(direction):
    requires_turn()

    current_location = self.location
    enemy_square = current_location.get_neighbor(direction, as=square)

    enemy = enemy_square.get_creature(as=square)
    enemy.damage(as=body)

def reproduce(direction, new_brain, endowment):
    requires_turn()

    current_location = self.location
    new_location = current_location.get_neighbor(direction, as=square)

    gas = self.gas
    if endowment > gas:
        return(1)
    else:
        self.gas = gas - endowment
        species = self.species
        gamemaster = self.gamemaster
        child = self.creature_builder.build_creature(new_brain, new_location, endowment, species, gamemaster as=creature_builder)
        self.gamemaster.notify_of_spawn(child, as=gamemaster)
        return(child)
