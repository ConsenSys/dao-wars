extern body: [notify_of_turn, deduct_gas:i, get_gas, get_dead, get_species]

inset("basic_macros.se")

data admin
data num_creatures
data creatures[]
data num_species
data species_creature_counts[]
data turn_limit
data current_creature

def init():
    self.admin = msg.sender

def set_creatures(_creatures:arr):
    authenticate(self.admin)

    self.num_creatures = len(_creatures)
    self.num_species = len(_creatures)
    save_array(_creatures, self.creatures)

def set_turn_limit(_turn_limit):
    authenticate(self.admin)

    self.turn_limit = _turn_limit

def set_admin(_admin):
    authenticate(self.admin)

    self.admin = _admin

def get_creatures():
    return_array(self.creatures:self.num_creatures)

def get_num_creatures():
    return(self.num_creatures)

def get_turn_limit():
    return(self.turn_limit)

def notify_of_spawn(new_creature):
    authenticate(self.current_creature)

    self.creatures[self.num_creatures] = new_creature
    self.num_creatures += 1

def run_game():
    turn = 0
    while turn < self.turn_limit:
        self.run_turn()
        turn += 1
        if self._num_surviving_species() == 1:
            return(1)

    return(1)

def run_turn():
    creature = 0
    while creature < self.num_creatures:
        current_creature = self.creatures[creature]
        self.current_creature = current_creature
        available_gas = current_creature.get_gas(as=body)

        starting_gas = tx.gas
        current_creature.notify_of_turn(as=body, gas=available_gas)
        ending_gas = tx.gas

        used_gas = starting_gas - ending_gas
        current_creature.deduct_gas(used_gas, as=body)

        creature += 1

    self._update_species_counts()

def _update_species_counts():
    private()

    i = 0
    while i < self.num_creatures:
        creature = self.creatures[i]

        if creature.get_dead() == 0 and creature.get_gas() > 0:
            self.species_creature_counts[creature.get_species()] += 1

        i += 1

def _num_surviving_species():
    private()

    result = 0

    i = 0
    while i < self.num_species:
        if self.species_creature_counts[i] != 0:
            result += 0

        i += 1

    return result
