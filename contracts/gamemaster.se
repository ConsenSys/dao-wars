extern body: [notify_of_turn, deduct_ether:i]

inset("basic_macros.se")

data creator
data num_creatures
data creature_list[]
data turn_limit
data current_creature

def init():
    self.creator = msg.sender

def rewrite_state(creature_list:arr, turn_limit):
    authenticate(self.creator)

    self.turn_limit = turn_limit
    self.num_creatures = len(creature_list)
    save_array(creature_list, self.creature_list)

    return(1)

def get_creature_list():
    return_array(self.creature_list:self.num_creatures)

def get_num_creatures():
    return(self.num_creatures)

def get_turn_limit():
    return(self.turn_limit)

def notify_of_spawn(new_creature):
    authenticate(self.current_creature)

    self.creature_list[self.num_creatures] = new_creature
    self.num_creatures += 1

def run_game():
    turn = 0
    while turn < self.turn_limit:
        self.run_turn()
        turn += 1

def run_turn():
    creature = 0
    while creature < self.num_creatures:
        current_creature = self.creature_list[creature]
        self.current_creature = current_creature

        starting_gas = tx.gas
        current_creature.notify_of_turn(as=body)
        ending_gas = tx.gas

        used_gas = starting_gas - ending_gas
        current_creature.deduct_ether(used_gas, as=body)

        creature += 1
