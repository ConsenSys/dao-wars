extern body.se: [attack:i:_, damage:_:_, deduct_gas:i:_, get_brain:_:i, get_dead:_:i, get_gamemaster:_:i, get_gas:_:i, get_hp:_:i, get_location:_:i, get_species:_:i, harvest:_:i, move:i:i, notify_body_of_turn:_:i, reproduce:iii:i, set_brain:i:_, set_creature_builder:i:_, set_gamemaster:i:_, set_gas:i:_, set_hp:i:_, set_location:i:_, set_species:i:_]

inset("basic_macros.se")

data admin
data num_creatures
data creatures[2^80]
data num_species
data species_creature_counts[2^80]
data turn_limit
data current_creature
data finished

def init():
    self.admin = msg.sender

def set_creatures(creature_1, creature_2):
    if msg.sender != self.admin:
        return(-1)

    num_creatures = 2
    self.num_creatures = num_creatures
    self.num_species = num_creatures
    self.species_creature_counts[0] = 1
    self.species_creature_counts[1] = 1

    self.creatures[0] = creature_1
    self.creatures[1] = creature_2

def set_turn_limit(_turn_limit):
    if msg.sender != self.admin:
        return(-1)

    self.turn_limit = _turn_limit

def set_admin(_admin):
    if msg.sender != self.admin:
        return(-1)

    self.admin = _admin

def get_creatures():
    size = self.num_creatures
    result = array(size)

    i = 0
    while i < size:
        result[i] = self.creatures[i]
        i += 1

    return(result:arr)

def get_species_creature_counts():
    size = self.num_species
    result = array(size)

    i = 0
    while i < size:
        result[i] = self.species_creature_counts[i]
        i += 1

    return(result:arr)

def get_num_creatures():
    return(self.num_creatures)

def get_turn_limit():
    return(self.turn_limit)

def get_finished():
    return(self.finished)

def notify_of_spawn(new_creature):
    if msg.sender != self.current_creature:
        return(-1)

    self.creatures[self.num_creatures] = new_creature
    self.num_creatures += 1

def run_game():
    turn = 0
    while turn < self.turn_limit:
        self.run_turn()
        turn += 1
        if self.finished == 1:
            return(1)

    return(1)

def run_turn():
    if self.finished == 0:
        creature = 0
        while creature < self.num_creatures:
            current_creature = self.creatures[creature]
            self.current_creature = current_creature
            available_gas = current_creature.get_gas()

            starting_gas = tx.gas
            current_creature.notify_body_of_turn(gas=available_gas)
            ending_gas = tx.gas

            used_gas = starting_gas - ending_gas
            current_creature.deduct_gas(used_gas)

            creature += 1

        self._update_species_counts()

        if self._num_surviving_species() <= 1:
            self.finished = 1

def _update_species_counts():
    private()

    i = 0
    while i < self.num_species:
        self.species_creature_counts[i] = 0

        i += 1

    i = 0
    while i < self.num_creatures:
        creature = self.creatures[i]

        if creature.get_dead() == 0:
            self.species_creature_counts[creature.get_species()] += 1

        i += 1

def _num_surviving_species():
    private()

    result = 0

    i = 0
    while i < self.num_species:
        if self.species_creature_counts[i] != 0:
            result += 1

        i += 1

    return result
